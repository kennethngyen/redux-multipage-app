import { createAsyncThunk, createSlice, PayloadAction, Action } from "@reduxjs/toolkit";
import { RootState } from "@/src/app/store";

export interface CounterState { //initial state: value can be number, status = of those three choise
    value: number;
    status: 'idle' | 'loading' | 'failed'; //any other string fails
  }
  
  const initialState: CounterState = {
    value: 0,
    status: 'idle', //default value=0 and status = idle
  };
    
  export const counterSlice = createSlice({
    name: 'counter',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
      increment: (state) => {

        state.value += 1; //state++;
      },
      decrement: (state) => {
        state.value -= 1;
      },
      // Use the PayloadAction type to declare the contents of `action.payload`
      incrementByAmount: (state, action: PayloadAction<number>) => {
        state.value += action.payload;
      },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
  });
  
  export const { increment, decrement, incrementByAmount } = counterSlice.actions;
  
  // The function below is called a selector and allows us to select a value from
  // the state. Selectors can also be defined inline where they're used instead of
  // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
  export const selectCount = (state: RootState) => state.counter.value;
  
  // We can also write thunks by hand, which may contain both sync and async logic.
  // Here's an example of conditionally dispatching actions based on current state.
   
  
  export default counterSlice.reducer;
  